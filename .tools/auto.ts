import { walk } from "std/fs/walk.ts";

const autogeneratedNotice = "/* Autogenerated by /.tools/auto.ts */\n";

// todo: add support for getters

const data = await loadData();

await writeSymbolFiles();
await writeTypeMethodFiles();
await writeRootMethodFiles();

async function loadData() {
  const result = new Map<string, Set<string>>();
  const regExp = /^(?<typeName>[^/]+)\/methods\/(?<methodName>[^./]+)\.ts$/;
  for await (const entry of walk(".", { match: [regExp] })) {
    const { typeName, methodName } = regExp.exec(entry.path)!.groups!;
    if (typeName.startsWith(".")) continue;
    if (!result.has(methodName)) result.set(methodName, new Set());
    result.get(methodName)!.add(typeName);
  }
  return result;
}

async function writeSymbolFiles() {
  for (const methodName of data.keys()) {
    const path = `symbols/${methodName}.ts`;
    const data = symbolFileData(methodName);
    await updateTextFile(path, data);
  }

  function symbolFileData(methodName: string) {
    return `${autogeneratedNotice}\nconst ${methodName} = Symbol();\n\nexport default ${methodName};\n`;
  }
}

async function writeTypeMethodFiles() {
  for (const [methodName, typeNames] of data) {
    for (const typeName of typeNames) {
      const path = `${typeName}/${methodName}.ts`;
      const data = typeMethodFileData(methodName, typeName);
      await updateTextFile(path, data);
    }
  }

  function typeMethodFileData(methodName: string, typeName: string) {
    return `${autogeneratedNotice}\n${imports()}\n${declareAugmentation()}\n${augmentation()}\n${defaultExport()}\n`;

    function imports() {
      let result = "";
      // todo: load supplement augmentations conditionally
      switch (typeName) {
        case "TypedArray":
        case "TypedArrayConstructor":
        case "Queue":
        case "QueueConstructor":
        case "Deque":
        case "DequeConstructor":
          result += `import ${typeName} from "../${typeName}.ts";\n\n`
            .replaceAll(/\BConstructor\b/g, "");
          break;
        case "Iterator":
        case "Generator":
        case "AsyncIterator":
        case "AsyncGenerator":
          result += `import * as ${typeName} from "../${typeName}.ts";\n\n`;
          break;
      }
      result += `import key from "../symbols/${methodName}.ts";\n`;
      result += `import value from "./methods/${methodName}.ts";\n`;
      return result;
    }

    function declareAugmentation() {
      return `declare ${isGlobal() ? "global" : `module "../${typeName}.ts"`} {
${
        typeNameArray()
          .map((typeName) =>
            `  ${
              isGlobal() ? "interface" : "export default interface"
            } ${typeName}${
              typeNameGenerics(typeName)
            } {\n    [key]: typeof value;\n  }`
          )
          .join("\n")
      }
}
`;

      function isGlobal() {
        switch (typeName) {
          case "Queue":
          case "Deque":
            return false;
          default:
            return true;
        }
      }

      function typeNameArray() {
        switch (typeName) {
          case "Array":
          case "Set":
          case "Map":
            return [typeName, `Readonly${typeName}`];
          default:
            return [typeName];
        }
      }

      function typeNameGenerics(typeName: string) {
        switch (typeName) {
          case "Array":
          case "AsyncIterator":
          case "Iterator":
          case "ReadonlyArray":
          case "ReadonlySet":
          case "Set":
          case "WeakSet":
          case "Queue":
          case "Deque":
            return "<T>";
          case "Map":
          case "ReadonlyMap":
          case "WeakMap":
            return "<K, V>";
          default:
            return "";
        }
      }
    }

    function augmentation() {
      return `Object.defineProperty(${target(typeName)}, key, { value });\n`;

      function target(typeName: string) {
        switch (typeName) {
          case "Math":
            return typeName;
          default:
            if (typeName.endsWith("Constructor")) {
              return typeName.slice(0, -"Constructor".length);
            }
            return `${typeName}.prototype`;
        }
      }
    }

    function defaultExport() {
      return "export default key;";
    }
  }
}

async function writeRootMethodFiles() {
  for (const [methodName, typeNames] of data) {
    const path = `${methodName}.ts`;
    const data = rootMethodFileData(methodName, [...typeNames]);
    await updateTextFile(path, data);
  }

  function rootMethodFileData(methodName: string, typeNames: string[]) {
    return `${autogeneratedNotice}\n${reexportDefault()}\n${imports()}`;

    function reexportDefault() {
      return `export { default } from "./symbols/${methodName}.ts";\n`;
    }

    function imports() {
      return `${typeNames.map(importStatement).join("\n")}\n`;

      function importStatement(typeName: string) {
        return `import "./${typeName}/${methodName}.ts";`;
      }
    }
  }
}

// todo: create watch mode

// for await (const { kind, paths } of Deno.watchFs(".", { recursive: true })) {
//   for (const path of paths) {
//     if (!/\/methods\/[a-zA-Z]+.ts$/.test(path)) continue;
//     console.log(kind, path);
//   }
// }

async function updateTextFile(path: string | URL, data: string) {
  try {
    if (data !== await Deno.readTextFile(path)) {
      await Deno.writeTextFile(path, data);
    }
  } catch {
    await Deno.writeTextFile(path, data);
  }
}
